{"ast":null,"code":"export default function checkDuplicateRouteNames(state) {\n  var duplicates = [];\n  var getRouteNames = function getRouteNames(location, state) {\n    state.routes.forEach(function (route) {\n      var _route$state, _route$state$routeNam;\n      var currentLocation = location ? location + \" > \" + route.name : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(function (routeName) {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, currentLocation + \" > \" + route.name]);\n        }\n      });\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  getRouteNames('', state);\n  return duplicates;\n}","map":{"version":3,"names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","_route$state","_route$state$routeNam","currentLocation","name","routeNames","routeName","push"],"sources":["D:\\Projects\\food_dev\\food_delivery-master\\node_modules\\@react-navigation\\core\\lib\\module\\checkDuplicateRouteNames.tsx"],"sourcesContent":["import type { NavigationState, PartialState } from '@react-navigation/routers';\n\nexport default function checkDuplicateRouteNames(state: NavigationState) {\n  const duplicates: string[][] = [];\n\n  const getRouteNames = (\n    location: string,\n    state: NavigationState | PartialState<NavigationState>\n  ) => {\n    state.routes.forEach((route: typeof state.routes[0]) => {\n      const currentLocation = location\n        ? `${location} > ${route.name}`\n        : route.name;\n\n      route.state?.routeNames?.forEach((routeName) => {\n        if (routeName === route.name) {\n          duplicates.push([\n            currentLocation,\n            `${currentLocation} > ${route.name}`,\n          ]);\n        }\n      });\n\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n\n  getRouteNames('', state);\n\n  return duplicates;\n}\n"],"mappings":"AAEA,eAAe,SAASA,wBAATA,CAAkCC,KAAlC,EAA0D;EACvE,IAAMC,UAAsB,GAAG,EAA/B;EAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CACjBC,QADoB,EAEpBH,KAFoB,EAGjB;IACHA,KAAK,CAACI,MAAN,CAAaC,OAAb,CAAsB,UAAAC,KAAD,EAAmC;MAAA,IAAAC,YAAA,EAAAC,qBAAA;MACtD,IAAMC,eAAe,GAAGN,QAAQ,GACzBA,QAAS,WAAKG,KAAK,CAACI,IAAK,GAC5BJ,KAAK,CAACI,IAFV;MAIA,CAAAH,YAAA,GAAAD,KAAK,CAACN,KAAN,cAAAO,YAAA,wBAAAC,qBAAA,GAAAD,YAAA,CAAaI,UAAb,cAAAH,qBAAA,uBAAAA,qBAAA,CAAyBH,OAAzB,CAAkC,UAAAO,SAAD,EAAe;QAC9C,IAAIA,SAAS,KAAKN,KAAK,CAACI,IAAxB,EAA8B;UAC5BT,UAAU,CAACY,IAAX,CAAgB,CACdJ,eADc,EAEXA,eAAgB,WAAKH,KAAK,CAACI,IAAK,CAFrC;QAID;MACF,CAPD;MASA,IAAIJ,KAAK,CAACN,KAAV,EAAiB;QACfE,aAAa,CAACO,eAAD,EAAkBH,KAAK,CAACN,KAAxB,CAAb;MACD;IACF,CAjBD;EAkBD,CAtBD;EAwBAE,aAAa,CAAC,EAAD,EAAKF,KAAL,CAAb;EAEA,OAAOC,UAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}