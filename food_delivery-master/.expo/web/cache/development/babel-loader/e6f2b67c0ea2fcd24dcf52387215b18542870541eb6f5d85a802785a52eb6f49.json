{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from \"./findFocusedRoute\";\nimport validatePathConfig from \"./validatePathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n  if (options) {\n    validatePathConfig(options);\n  }\n  var initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n      if (bParts[i] == null) {\n        return -1;\n      }\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      if (aWildCard) {\n        return 1;\n      }\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n      }\n    }\n    return _extends(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n      return _objectSpread(_objectSpread({}, c), {}, {\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n      });\n    })),\n    routes = _matchAgainstConfigs.routes,\n    remainingPath = _matchAgainstConfigs.remainingPath;\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return _extends(acc, _defineProperty({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n    var _config$pattern;\n    var _ret = _loop(config);\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n    }\n    return (it === '*' ? '.*' : escape(it)) + \"\\\\/\";\n  }).join('') + \")\") : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return state;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","_ref","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","apply","_toConsumableArray","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","_extends","_defineProperty","match","find","_configs$find","c","screen","result","current","_matchAgainstConfigs","matchAgainstConfigs","_objectSpread","regex","RegExp","source","remainingPath","joinPaths","_ref2","_len","arguments","paths","Array","_key","p","_loop","matchedParams","_config$pattern","_config$path","params","value","_config$parse","parse","_iterator","_createForOfIteratorHelperLoose","_step","done","_ret","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","_pattern","pop","findParseConfigForRoute","routeName","flatConfig","_iterator2","_step2","findInitialRoute","_iterator3","_step3","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query"],"sources":["D:\\Projects\\food_dev\\food_delivery-master\\node_modules\\@react-navigation\\core\\lib\\module\\getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}