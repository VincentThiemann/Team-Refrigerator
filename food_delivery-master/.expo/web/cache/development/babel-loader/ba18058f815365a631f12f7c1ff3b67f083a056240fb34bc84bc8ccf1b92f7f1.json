{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar EventEmitter = require(\"./vendor/eventemitter3\");\nvar inject = function inject(_ref) {\n  var _ref$module = _slicedToArray(_ref.module, 2),\n    id = _ref$module[0],\n    code = _ref$module[1],\n    sourceURL = _ref.sourceURL;\n  if (global.globalEvalWithSourceUrl) {\n    global.globalEvalWithSourceUrl(code, sourceURL);\n  } else {\n    eval(code);\n  }\n};\nvar injectUpdate = function injectUpdate(update) {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n};\nvar HMRClient = function (_EventEmitter) {\n  _inherits(HMRClient, _EventEmitter);\n  var _super = _createSuper(HMRClient);\n  function HMRClient(url) {\n    var _this;\n    _classCallCheck(this, HMRClient);\n    _this = _super.call(this);\n    _this._isEnabled = false;\n    _this._pendingUpdate = null;\n    _this._queue = [];\n    _this._state = \"opening\";\n    _this._ws = new global.WebSocket(url);\n    _this._ws.onopen = function () {\n      _this._state = \"open\";\n      _this.emit(\"open\");\n      _this._flushQueue();\n    };\n    _this._ws.onerror = function (error) {\n      _this.emit(\"connection-error\", error);\n    };\n    _this._ws.onclose = function (closeEvent) {\n      _this._state = \"closed\";\n      _this.emit(\"close\", closeEvent);\n    };\n    _this._ws.onmessage = function (message) {\n      var data = JSON.parse(String(message.data));\n      switch (data.type) {\n        case \"bundle-registered\":\n          _this.emit(\"bundle-registered\");\n          break;\n        case \"update-start\":\n          _this.emit(\"update-start\", data.body);\n          break;\n        case \"update\":\n          _this.emit(\"update\", data.body);\n          break;\n        case \"update-done\":\n          _this.emit(\"update-done\");\n          break;\n        case \"error\":\n          _this.emit(\"error\", data.body);\n          break;\n        default:\n          _this.emit(\"error\", {\n            type: \"unknown-message\",\n            message: data\n          });\n      }\n    };\n    _this.on(\"update\", function (update) {\n      if (_this._isEnabled) {\n        injectUpdate(update);\n      } else if (_this._pendingUpdate == null) {\n        _this._pendingUpdate = update;\n      } else {\n        _this._pendingUpdate = mergeUpdates(_this._pendingUpdate, update);\n      }\n    });\n    return _this;\n  }\n  _createClass(HMRClient, [{\n    key: \"close\",\n    value: function close() {\n      this._ws.close();\n    }\n  }, {\n    key: \"send\",\n    value: function send(message) {\n      switch (this._state) {\n        case \"opening\":\n          this._queue.push(message);\n          break;\n        case \"open\":\n          this._ws.send(message);\n          break;\n        case \"closed\":\n          break;\n        default:\n          throw new Error(\"[WebSocketHMRClient] Unknown state: \" + this._state);\n      }\n    }\n  }, {\n    key: \"_flushQueue\",\n    value: function _flushQueue() {\n      var _this2 = this;\n      this._queue.forEach(function (message) {\n        return _this2.send(message);\n      });\n      this._queue.length = 0;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this._isEnabled = true;\n      var update = this._pendingUpdate;\n      this._pendingUpdate = null;\n      if (update != null) {\n        injectUpdate(update);\n      }\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._isEnabled = false;\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this._isEnabled;\n    }\n  }, {\n    key: \"hasPendingUpdates\",\n    value: function hasPendingUpdates() {\n      return this._pendingUpdate != null;\n    }\n  }]);\n  return HMRClient;\n}(EventEmitter);\nfunction mergeUpdates(base, next) {\n  var addedIDs = new Set();\n  var deletedIDs = new Set();\n  var moduleMap = new Map();\n  applyUpdateLocally(base);\n  applyUpdateLocally(next);\n  function applyUpdateLocally(update) {\n    update.deleted.forEach(function (id) {\n      if (addedIDs.has(id)) {\n        addedIDs.delete(id);\n      } else {\n        deletedIDs.add(id);\n      }\n      moduleMap.delete(id);\n    });\n    update.added.forEach(function (item) {\n      var id = item.module[0];\n      if (deletedIDs.has(id)) {\n        deletedIDs.delete(id);\n      } else {\n        addedIDs.add(id);\n      }\n      moduleMap.set(id, item);\n    });\n    update.modified.forEach(function (item) {\n      var id = item.module[0];\n      moduleMap.set(id, item);\n    });\n  }\n  var result = {\n    isInitialUpdate: next.isInitialUpdate,\n    revisionId: next.revisionId,\n    added: [],\n    modified: [],\n    deleted: []\n  };\n  deletedIDs.forEach(function (id) {\n    result.deleted.push(id);\n  });\n  moduleMap.forEach(function (item, id) {\n    if (deletedIDs.has(id)) {\n      return;\n    }\n    if (addedIDs.has(id)) {\n      result.added.push(item);\n    } else {\n      result.modified.push(item);\n    }\n  });\n  return result;\n}\nmodule.exports = HMRClient;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_slicedToArray","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","EventEmitter","inject","_ref","_ref$module","module","id","code","sourceURL","global","globalEvalWithSourceUrl","eval","injectUpdate","update","added","forEach","modified","HMRClient","_EventEmitter","_super","url","_this","_isEnabled","_pendingUpdate","_queue","_state","_ws","WebSocket","onopen","emit","_flushQueue","onerror","error","onclose","closeEvent","onmessage","message","data","JSON","parse","String","type","body","on","mergeUpdates","key","value","close","send","push","Error","_this2","length","enable","disable","isEnabled","hasPendingUpdates","base","next","addedIDs","Set","deletedIDs","moduleMap","Map","applyUpdateLocally","deleted","has","delete","add","item","set","isInitialUpdate","revisionId","exports"],"sources":["D:/Projects/food_dev/food_delivery-master/node_modules/react-native/node_modules/metro-runtime/src/modules/HMRClient.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n * @oncall react_native\n */\n\n\"use strict\";\n\nconst EventEmitter = require(\"./vendor/eventemitter3\");\nconst inject = ({ module: [id, code], sourceURL }) => {\n  // Some engines do not support `sourceURL` as a comment. We expose a\n  // `globalEvalWithSourceUrl` function to handle updates in that case.\n  if (global.globalEvalWithSourceUrl) {\n    global.globalEvalWithSourceUrl(code, sourceURL);\n  } else {\n    // eslint-disable-next-line no-eval\n    eval(code);\n  }\n};\nconst injectUpdate = (update) => {\n  update.added.forEach(inject);\n  update.modified.forEach(inject);\n};\nclass HMRClient extends EventEmitter {\n  _isEnabled = false;\n  _pendingUpdate = null;\n  _queue = [];\n  _state = \"opening\";\n  constructor(url) {\n    super();\n\n    // Access the global WebSocket object only after enabling the client,\n    // since some polyfills do the initialization lazily.\n    this._ws = new global.WebSocket(url);\n    this._ws.onopen = () => {\n      this._state = \"open\";\n      this.emit(\"open\");\n      this._flushQueue();\n    };\n    this._ws.onerror = (error) => {\n      this.emit(\"connection-error\", error);\n    };\n    this._ws.onclose = (closeEvent) => {\n      this._state = \"closed\";\n      this.emit(\"close\", closeEvent);\n    };\n    this._ws.onmessage = (message) => {\n      const data = JSON.parse(String(message.data));\n      switch (data.type) {\n        case \"bundle-registered\":\n          this.emit(\"bundle-registered\");\n          break;\n        case \"update-start\":\n          this.emit(\"update-start\", data.body);\n          break;\n        case \"update\":\n          this.emit(\"update\", data.body);\n          break;\n        case \"update-done\":\n          this.emit(\"update-done\");\n          break;\n        case \"error\":\n          this.emit(\"error\", data.body);\n          break;\n        default:\n          this.emit(\"error\", {\n            type: \"unknown-message\",\n            message: data,\n          });\n      }\n    };\n    this.on(\"update\", (update) => {\n      if (this._isEnabled) {\n        injectUpdate(update);\n      } else if (this._pendingUpdate == null) {\n        this._pendingUpdate = update;\n      } else {\n        this._pendingUpdate = mergeUpdates(this._pendingUpdate, update);\n      }\n    });\n  }\n  close() {\n    this._ws.close();\n  }\n  send(message) {\n    switch (this._state) {\n      case \"opening\":\n        this._queue.push(message);\n        break;\n      case \"open\":\n        this._ws.send(message);\n        break;\n      case \"closed\":\n        // Ignore.\n        break;\n      default:\n        throw new Error(\"[WebSocketHMRClient] Unknown state: \" + this._state);\n    }\n  }\n  _flushQueue() {\n    this._queue.forEach((message) => this.send(message));\n    this._queue.length = 0;\n  }\n  enable() {\n    this._isEnabled = true;\n    const update = this._pendingUpdate;\n    this._pendingUpdate = null;\n    if (update != null) {\n      injectUpdate(update);\n    }\n  }\n  disable() {\n    this._isEnabled = false;\n  }\n  isEnabled() {\n    return this._isEnabled;\n  }\n  hasPendingUpdates() {\n    return this._pendingUpdate != null;\n  }\n}\nfunction mergeUpdates(base, next) {\n  const addedIDs = new Set();\n  const deletedIDs = new Set();\n  const moduleMap = new Map();\n\n  // Fill in the temporary maps and sets from both updates in their order.\n  applyUpdateLocally(base);\n  applyUpdateLocally(next);\n  function applyUpdateLocally(update) {\n    update.deleted.forEach((id) => {\n      if (addedIDs.has(id)) {\n        addedIDs.delete(id);\n      } else {\n        deletedIDs.add(id);\n      }\n      moduleMap.delete(id);\n    });\n    update.added.forEach((item) => {\n      const id = item.module[0];\n      if (deletedIDs.has(id)) {\n        deletedIDs.delete(id);\n      } else {\n        addedIDs.add(id);\n      }\n      moduleMap.set(id, item);\n    });\n    update.modified.forEach((item) => {\n      const id = item.module[0];\n      moduleMap.set(id, item);\n    });\n  }\n\n  // Now reconstruct a unified update from our in-memory maps and sets.\n  // Applying it should be equivalent to applying both of them individually.\n  const result = {\n    isInitialUpdate: next.isInitialUpdate,\n    revisionId: next.revisionId,\n    added: [],\n    modified: [],\n    deleted: [],\n  };\n  deletedIDs.forEach((id) => {\n    result.deleted.push(id);\n  });\n  moduleMap.forEach((item, id) => {\n    if (deletedIDs.has(id)) {\n      return;\n    }\n    if (addedIDs.has(id)) {\n      result.added.push(item);\n    } else {\n      result.modified.push(item);\n    }\n  });\n  return result;\n}\nmodule.exports = HMRClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}