{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"key\", \"routeNames\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from \"./checkDuplicateRouteNames\";\nimport checkSerializable from \"./checkSerializable\";\nimport { NOT_INITIALIZED_ERROR } from \"./createNavigationContainerRef\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport findFocusedRoute from \"./findFocusedRoute\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContainerRefContext from \"./NavigationContainerRefContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport useChildListeners from \"./useChildListeners\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useSyncState from \"./useSyncState\";\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n  var key = state.key,\n    routeNames = state.routeNames,\n    partialState = _objectWithoutProperties(state, _excluded);\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n    onStateChange = _ref.onStateChange,\n    onUnhandledAction = _ref.onUnhandledAction,\n    independent = _ref.independent,\n    children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  var _useSyncState = useSyncState(function () {\n      return getPartialState(initialState == null ? undefined : initialState);\n    }),\n    _useSyncState2 = _slicedToArray(_useSyncState, 5),\n    state = _useSyncState2[0],\n    getState = _useSyncState2[1],\n    setState = _useSyncState2[2],\n    scheduleUpdate = _useSyncState2[3],\n    flushUpdates = _useSyncState2[4];\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var _useChildListeners = useChildListeners(),\n    listeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n        return navigation.canGoBack();\n      }),\n      result = _listeners$focus$.result,\n      handled = _listeners$focus$.handled;\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n    var target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    var route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n  var _useOptionsGetters = useOptionsGetters({}),\n    addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n    getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n  var navigation = React.useMemo(function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = checkSerializable(hydratedState);\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n            reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        var duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children))))));\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"names":["CommonActions","React","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationRouteContext","NavigationStateContext","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useOptionsGetters","ScheduleUpdateContext","useSyncState","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","_objectWithoutProperties","_excluded","_objectSpread","stale","routes","map","route","BaseNavigationContainer","forwardRef","_ref","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","isDefault","Error","_useSyncState","_useSyncState2","_slicedToArray","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","_useChildListeners","listeners","addListener","_useKeyedChildListene","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","_listeners$focus$","result","handled","resetRoot","_state$key","_keyedListeners$getSt","_keyedListeners$getSt2","target","root","call","reset","getRootState","_keyedListeners$getSt3","_keyedListeners$getSt4","getCurrentRoute","emitter","_useOptionsGetters","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","apply","arguments","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element","createElement","Provider","value"],"sources":["D:\\Projects\\food_dev\\food_delivery-master\\node_modules\\@react-navigation\\core\\lib\\module\\BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}