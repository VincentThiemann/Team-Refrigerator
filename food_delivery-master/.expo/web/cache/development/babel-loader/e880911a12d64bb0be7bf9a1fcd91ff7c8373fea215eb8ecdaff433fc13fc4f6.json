{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport isRecordEqual from \"./isRecordEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n        name = _config$props.name,\n        children = _config$props.children,\n        component = _config$props.component,\n        getComponent = _config$props.getComponent;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n  return configs;\n};\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n  var children = options.children,\n    screenListeners = options.screenListeners,\n    rest = _objectWithoutProperties(options, _excluded);\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null))),\n    router = _React$useRef.current;\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key !== null && key !== void 0 ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return _extends(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n  var _React$useContext = React.useContext(NavigationStateContext),\n    currentState = _React$useContext.state,\n    getCurrentState = _React$useContext.getState,\n    setCurrentState = _React$useContext.setState,\n    setKey = _React$useContext.setKey,\n    getKey = _React$useContext.getKey,\n    getIsInitial = _React$useContext.getIsInitial;\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  var _React$useMemo = React.useMemo(function () {\n      var _route$params4;\n      var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n        var _route$params, _route$params2, _route$params3;\n        var initialParams = screens[curr].props.initialParams;\n        var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n        return acc;\n      }, {});\n      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n        return [router.getInitialState({\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), true];\n      } else {\n        var _route$params$state, _route$params5;\n        return [router.getRehydratedState((_route$params$state = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) !== null && _route$params$state !== void 0 ? _route$params$state : currentState, {\n          routeNames: routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList: routeGetIdList\n        }), false];\n      }\n    }, [currentState, router, isStateValid]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    initializedState = _React$useMemo2[0],\n    isFirstStateInitialization = _React$useMemo2[1];\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref;\n    var routeNames = [];\n    var route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n    if (route == null) {\n      return;\n    }\n    var navigation = descriptors[route.key].navigation;\n    var listeners = (_ref = []).concat.apply(_ref, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n  var _useChildListeners = useChildListeners(),\n    childListeners = _useChildListeners.listeners,\n    addListener = _useChildListeners.addListener;\n  var _useKeyedChildListene = useKeyedChildListeners(),\n    keyedListeners = _useKeyedChildListene.keyedListeners,\n    addKeyedListener = _useKeyedChildListene.addKeyedListener;\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","apply","_toConsumableArray","concat","screenOptions","String","process","env","NODE_ENV","forEach","config","_config$props","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","_objectWithoutProperties","_excluded","_React$useRef","useRef","_objectSpread","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","_extends","_defineProperty","getId","length","isStateValid","useCallback","isStateInitialized","stale","_React$useContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","_React$useMemo","useMemo","_route$params4","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","getInitialState","_route$params$state","_route$params5","getRehydratedState","_React$useMemo2","_slicedToArray","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","Object","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","_ref","target","_route","routes","find","index","_route2","navigation","descriptors","listeners","cb","i","self","lastIndexOf","listener","emit","data","_useChildListeners","childListeners","addListener","_useKeyedChildListene","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"sources":["D:\\Projects\\food_dev\\food_delivery-master\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":";;;;;;;;AAAA,SACEA,aADF,QAWO,2BAXP;AAYA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,UAAnC;AAEA,OAAOC,KAAP;AACA,OAAOC,YAAP;AACA,OAAOC,aAAP;AACA,OAAOC,wBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,MAAP;AACA,SAKEC,iBALF;AAQA,OAAOC,iBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,gBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,eAAP;AACA,OAAOC,kCAAP;AACA,OAAOC,cAAP;AACA,OAAOC,sBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,eAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,iBAAP;AAIAd,iBAAiB;AAOjB,IAAMe,UAAU,GAAI,SAAdA,UAAUA,CAAIC,GAAD;EAAA,OACjBA,GAAG,KAAKC,SAAR,IAAsB,OAAOD,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,EAD3D;AAAA;AAQA,IAAME,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAK/BC,QALkC,EAMlCC,QANkC,EAOlCC,YAPkC,EAY/B;EACH,IAAMC,OAAO,GAAG/B,KAAK,CAACgC,QAAN,CAAeC,OAAf,CAAuBL,QAAvB,EAAiCM,MAAjC,CAEd,UAACC,GAAD,EAAMC,KAAN,EAAgB;IAAA,IAAAC,WAAA,EAAAC,YAAA;IAChB,IAAItC,KAAK,CAACuC,cAAN,CAAqBH,KAArB,CAAJ,EAAiC;MAC/B,IAAIA,KAAK,CAACI,IAAN,KAAehC,MAAnB,EAA2B;QAIzB,IAAI,CAACgB,UAAU,CAACY,KAAK,CAACK,KAAN,CAAYC,aAAb,CAAf,EAA4C;UAC1C,MAAM,IAAIC,KAAJ,2CACoCC,IAAI,CAACC,SAAL,CACtCT,KAAK,CAACK,KAAN,CAAYC,aAD0B,CAEtC,0BACAN,KAAK,CAACK,KAAN,CAAYK,IACb,sDALH;QAOD;QAEDX,GAAG,CAACY,IAAJ,CAAS;UACPC,IAAI,EAAE,CAACnB,QAAD,EAAWO,KAAK,CAACK,KAAN,CAAYC,aAAvB,CADC;UAEPO,OAAO,EAAEnB,YAFF;UAGPW,KAAK,EAAEL,KAAK,CAACK;QAHN,CAAT;QAWA,OAAON,GAAP;MACD;MAED,IAAIC,KAAK,CAACI,IAAN,KAAexC,KAAK,CAACkD,QAArB,IAAiCd,KAAK,CAACI,IAAN,KAAetC,KAApD,EAA2D;QACzD,IAAI,CAACsB,UAAU,CAACY,KAAK,CAACK,KAAN,CAAYC,aAAb,CAAf,EAA4C;UAC1C,MAAM,IAAIC,KAAJ,2CACoCC,IAAI,CAACC,SAAL,CACtCT,KAAK,CAACK,KAAN,CAAYC,aAD0B,CAEtC,oEAHJ;QAKD;QAIDP,GAAG,CAACY,IAAJ,CAAAI,KAAA,CAAAhB,GAAG,EAAAiB,kBAAA,CACEzB,2BAA2B,CAC5BS,KAAK,CAACK,KAAN,CAAYb,QADgB,EAE5BQ,KAAK,CAACK,KAAN,CAAYC,aAFgB,EAG5BN,KAAK,CAACI,IAAN,KAAetC,KAAf,GACI4B,YADJ,GAEIA,YAAY,IAAI,IAAhB,MAAAuB,MAAA,CAAAD,kBAAA,CACItB,YAAJ,IAAkBM,KAAK,CAACK,KAAN,CAAYa,aAA9B,KACA,CAAClB,KAAK,CAACK,KAAN,CAAYa,aAAb,CAPwB,CADhC;QAWA,OAAOnB,GAAP;MACD;IACF;IAED,MAAM,IAAIQ,KAAJ,wGAEF3C,KAAK,CAACuC,cAAN,CAAqBH,KAArB,WAEM,OAAOA,KAAK,CAACI,IAAb,KAAsB,QAAtB,GAAiCJ,KAAK,CAACI,IAAvC,IAAAH,WAAA,GAA8CD,KAAK,CAACI,IAApD,cAAAH,WAAA,uBAA8CA,WAAA,CAAYS,IAC3D,WACC,CAAAR,YAAA,GAAAF,KAAK,CAACK,KAAN,cAAAH,YAAA,eAAAA,YAAA,CAAaQ,IAAb,yBAAwCV,KAAK,CAACK,KAAN,CAAYK,IAAK,SAAK,EAC/D,IACD,OAAOV,KAAP,KAAiB,QAAjB,GACAQ,IAAI,CAACC,SAAL,CAAeT,KAAf,CADA,SAEImB,MAAM,CAACnB,KAAD,CAAQ,MACvB,iGAXH;EAaD,CAvEe,EAuEb,EAvEa,CAAhB;EAyEA,IAAIoB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC3B,OAAO,CAAC4B,OAAR,CAAiB,UAAAC,MAAD,EAAY;MAC1B,IAAAC,aAAA,GAAoDD,MAAM,CAACnB,KAA3D;QAAQK,IAAF,GAAAe,aAAA,CAAEf,IAAF;QAAQlB,QAAR,GAAAiC,aAAA,CAAQjC,QAAR;QAAkBkC,SAAlB,GAAAD,aAAA,CAAkBC,SAAlB;QAA6BC,YAAA,GAAAF,aAAA,CAAAE,YAAA;MAEnC,IAAI,OAAOjB,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAjC,EAAuC;QACrC,MAAM,IAAIH,KAAJ,2BACoBC,IAAI,CAACC,SAAL,CACtBC,IADsB,CAEtB,sDAHJ;MAKD;MAED,IACElB,QAAQ,IAAI,IAAZ,IACAkC,SAAS,KAAKpC,SADd,IAEAqC,YAAY,KAAKrC,SAHnB,EAIE;QACA,IAAIE,QAAQ,IAAI,IAAZ,IAAoBkC,SAAS,KAAKpC,SAAtC,EAAiD;UAC/C,MAAM,IAAIiB,KAAJ,gEACyDG,IAAK,wCADpE;QAGD;QAED,IAAIlB,QAAQ,IAAI,IAAZ,IAAoBmC,YAAY,KAAKrC,SAAzC,EAAoD;UAClD,MAAM,IAAIiB,KAAJ,mEAC4DG,IAAK,wCADvE;QAGD;QAED,IAAIgB,SAAS,KAAKpC,SAAd,IAA2BqC,YAAY,KAAKrC,SAAhD,EAA2D;UACzD,MAAM,IAAIiB,KAAJ,oEAC6DG,IAAK,wCADxE;QAGD;QAED,IAAIlB,QAAQ,IAAI,IAAZ,IAAoB,OAAOA,QAAP,KAAoB,UAA5C,EAAwD;UACtD,MAAM,IAAIe,KAAJ,+DACwDG,IAAK,yDADnE;QAGD;QAED,IAAIgB,SAAS,KAAKpC,SAAd,IAA2B,CAACzB,kBAAkB,CAAC6D,SAAD,CAAlD,EAA+D;UAC7D,MAAM,IAAInB,KAAJ,gEACyDG,IAAK,4CADpE;QAGD;QAED,IAAIiB,YAAY,KAAKrC,SAAjB,IAA8B,OAAOqC,YAAP,KAAwB,UAA1D,EAAsE;UACpE,MAAM,IAAIpB,KAAJ,mEAC4DG,IAAK,2DADvE;QAGD;QAED,IAAI,OAAOgB,SAAP,KAAqB,UAAzB,EAAqC;UACnC,IAAIA,SAAS,CAAChB,IAAV,KAAmB,WAAvB,EAAoC;YAIlCkB,OAAO,CAACC,IAAR,wFACuFnB,IAAK,2RAD5F;UAGD,CAPD,MAOO,IAAI,SAASoB,IAAT,CAAcJ,SAAS,CAAChB,IAAxB,CAAJ,EAAmC;YACxCkB,OAAO,CAACC,IAAR,qCACoCH,SAAS,CAAChB,IAAK,0BAAoBA,IAAK,6MAD5E;UAGD;QACF;MACF,CAvDD,MAuDO;QACL,MAAM,IAAIH,KAAJ,qFAC8EG,IAAK,yLADzF;MAGD;IACF,CAvED;EAwED;EAED,OAAOf,OAAP;AACD,CAlKD;AA2KA,eAAe,SAASoC,oBAATA,CAObC,YAPa,EAQbnB,OARa,EAeb;EACA,IAAMoB,YAAY,GAAG/C,oBAAoB,EAAzC;EAEA,IAAMgD,KAAK,GAAGtE,KAAK,CAACuE,UAAN,CAAiBjE,sBAAjB,CAAd;EAIA,IAAQsB,QAAF,GAAyCqB,OAA/C,CAAQrB,QAAF;IAAY4C,eAAZ,GAAyCvB,OAA/C,CAAkBuB,eAAZ;IAAgCC,IAAA,GAAAC,wBAAA,CAASzB,OAA/C,EAAA0B,SAAA;EACA,IAAAC,aAAA,GAA4B5E,KAAK,CAAC6E,MAAN,CAC1BT,YAAY,CAAAU,aAAA,CAAAA,aAAA,KACNL,IADO,GAEPH,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAES,MAAP,IACJT,KAAK,CAACS,MAAN,CAAaC,KAAb,IAAsB,IADlB,IAEJV,KAAK,CAACS,MAAN,CAAaE,OAAb,KAAyB,KAFrB,IAGJ,OAAOX,KAAK,CAACS,MAAN,CAAaG,MAApB,KAA+B,QAH3B,GAIA;MAAEC,gBAAgB,EAAEb,KAAK,CAACS,MAAN,CAAaG;IAAjC,CAJA,GAKA,IALJ,EAHwB,CAA5B;IAAiBE,MAAA,GAAAR,aAAA,CAATS,OAAO;EAYf,IAAMC,YAAY,GAAG3D,2BAA2B,CAI9CC,QAJ8C,CAAhD;EAMA,IAAM2D,OAAO,GAAGD,YAAY,CAACpD,MAAb,CAEd,UAACC,GAAD,EAAMyB,MAAN,EAAiB;IACjB,IAAIA,MAAM,CAACnB,KAAP,CAAaK,IAAb,IAAqBX,GAAzB,EAA8B;MAC5B,MAAM,IAAIQ,KAAJ,gHACyGiB,MAAM,CAACnB,KAAP,CAAaK,IAAK,QADjI;IAGD;IAEDX,GAAG,CAACyB,MAAM,CAACnB,KAAP,CAAaK,IAAd,CAAH,GAAyBc,MAAzB;IACA,OAAOzB,GAAP;EACD,CAXe,EAWb,EAXa,CAAhB;EAaA,IAAMqD,UAAU,GAAGF,YAAY,CAACG,GAAb,CAAkB,UAAA7B,MAAD;IAAA,OAAYA,MAAM,CAACnB,KAAP,CAAaK,IAA1C;EAAA,EAAnB;EACA,IAAM4C,YAAY,GAAGF,UAAU,CAACtD,MAAX,CACnB,UAACC,GAAD,EAAMwD,IAAN,EAAe;IACbxD,GAAG,CAACwD,IAAD,CAAH,GAAYJ,OAAO,CAACI,IAAD,CAAP,CAAc3C,IAAd,CAAmByC,GAAnB,CAAwB,UAAAhE,GAAD;MAAA,OAASA,GAAT,aAASA,GAAT,cAASA,GAAT,GAAgB,EAAvC;IAAA,GAA2CmE,IAA3C,CAAgD,GAAhD,CAAZ;IACA,OAAOzD,GAAP;EACD,CAJkB,EAKnB,EALmB,CAArB;EAOA,IAAM0D,cAAc,GAAGL,UAAU,CAACtD,MAAX,CACrB,UAACC,GAAD,EAAMwD,IAAN,EAAe;IACb,IAAQG,aAAA,GAAkBP,OAAO,CAACI,IAAD,CAAP,CAAclD,KAAxC,CAAQqD,aAAA;IACR3D,GAAG,CAACwD,IAAD,CAAH,GAAYG,aAAZ;IACA,OAAO3D,GAAP;EACD,CALoB,EAMrB,EANqB,CAAvB;EAQA,IAAM4D,cAAc,GAAGP,UAAU,CAACtD,MAAX,CAGrB,UAACC,GAAD,EAAMwD,IAAN;IAAA,OACEK,QAAA,CAAc7D,GAAd,EAAA8D,eAAA,KACGN,IAAD,EAAQJ,OAAO,CAACI,IAAD,CAAP,CAAclD,KAAd,CAAoByD,KAAA,EALX;EAAA,GAOrB,EAPqB,CAAvB;EAUA,IAAI,CAACV,UAAU,CAACW,MAAhB,EAAwB;IACtB,MAAM,IAAIxD,KAAJ,CACJ,4FADI,CAAN;EAGD;EAED,IAAMyD,YAAY,GAAGpG,KAAK,CAACqG,WAAN,CAClB,UAAArB,KAAD;IAAA,OAAWA,KAAK,CAACxC,IAAN,KAAed,SAAf,IAA4BsD,KAAK,CAACxC,IAAN,KAAe4C,MAAM,CAAC5C,IAD1C;EAAA,GAEnB,CAAC4C,MAAM,CAAC5C,IAAR,CAFmB,CAArB;EAKA,IAAM8D,kBAAkB,GAAGtG,KAAK,CAACqG,WAAN,CACxB,UAAArB,KAAD;IAAA,OACEA,KAAK,KAAKtD,SAAV,IAAuBsD,KAAK,CAACuB,KAAN,KAAgB,KAAvC,IAAgDH,YAAY,CAACpB,KAAD,CAFrC;EAAA,GAGzB,CAACoB,YAAD,CAHyB,CAA3B;EAMA,IAAAI,iBAAA,GAOIxG,KAAK,CAACuE,UAAN,CAAiBhE,sBAAjB,CAPJ;IACSkG,YADH,GAAAD,iBAAA,CACJxB,KAAK;IACK0B,eAFN,GAAAF,iBAAA,CAEJG,QAAQ;IACEC,eAHN,GAAAJ,iBAAA,CAGJK,QAAQ;IACRC,MAJI,GAAAN,iBAAA,CAIJM,MAJI;IAKJC,MALI,GAAAP,iBAAA,CAKJO,MALI;IAMJC,YAAA,GAAAR,iBAAA,CAAAQ,YAAA;EAGF,IAAMC,cAAc,GAAGjH,KAAK,CAAC6E,MAAN,CAAa,KAAb,CAAvB;EAEA,IAAMqC,YAAY,GAAGlH,KAAK,CAACqG,WAAN,CAAkB,YAAM;IAC3CO,eAAe,CAAClF,SAAD,CAAf;IACAuF,cAAc,CAAC5B,OAAf,GAAyB,IAAzB;EACD,CAHoB,EAGlB,CAACuB,eAAD,CAHkB,CAArB;EAKA,IAAMC,QAAQ,GAAG7G,KAAK,CAACqG,WAAN,CACd,UAAArB,KAAD,EAAwE;IACtE,IAAIiC,cAAc,CAAC5B,OAAnB,EAA4B;MAI1B;IACD;IACDuB,eAAe,CAAC5B,KAAD,CAAf;EACD,CATc,EAUf,CAAC4B,eAAD,CAVe,CAAjB;EAaA,IAAAO,cAAA,GAAuDnH,KAAK,CAACoH,OAAN,CAAc,YAAM;MAAA,IAAAC,cAAA;MACzE,IAAMC,qBAAqB,GAAG9B,UAAU,CAACtD,MAAX,CAE5B,UAACC,GAAD,EAAMwD,IAAN,EAAe;QAAA,IAAA4B,aAAA,EAAAC,cAAA,EAAAC,cAAA;QACf,IAAQ3B,aAAA,GAAkBP,OAAO,CAACI,IAAD,CAAP,CAAclD,KAAxC,CAAQqD,aAAA;QACR,IAAM4B,uBAAuB,GAC3B,CAAApD,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAAiD,aAAA,GAAAjD,KAAK,CAAES,MAAP,cAAAwC,aAAA,uBAAAA,aAAA,CAAevC,KAAf,KAAwB,IAAxB,IACA,CAAAV,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAAkD,cAAA,GAAAlD,KAAK,CAAES,MAAP,cAAAyC,cAAA,uBAAAA,cAAA,CAAevC,OAAf,MAA2B,KAD3B,IAEA,CAAAX,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAAmD,cAAA,GAAAnD,KAAK,CAAES,MAAP,cAAA0C,cAAA,uBAAAA,cAAA,CAAevC,MAAf,MAA0BS,IAF1B,GAGIrB,KAAK,CAACS,MAAN,CAAaA,MAHjB,GAIIrD,SALN;QAOAS,GAAG,CAACwD,IAAD,CAAH,GACEG,aAAa,KAAKpE,SAAlB,IAA+BgG,uBAAuB,KAAKhG,SAA3D,GAAAoD,aAAA,CAAAA,aAAA,KAESgB,aADL,GAEK4B,uBAAA,IAELhG,SANN;QAQA,OAAOS,GAAP;MACD,CApB6B,EAoB3B,EApB2B,CAA9B;MA0BA,IACE,CAACsE,YAAY,KAAK/E,SAAjB,IAA8B,CAAC0E,YAAY,CAACK,YAAD,CAA5C,KACA,CAAAnC,KAAK,SAAL,IAAAA,KAAK,WAAL,aAAA+C,cAAA,GAAA/C,KAAK,CAAES,MAAP,cAAAsC,cAAA,uBAAAA,cAAA,CAAerC,KAAf,KAAwB,IAF1B,EAGE;QACA,OAAO,CACLI,MAAM,CAACuC,eAAP,CAAuB;UACrBnC,UADqB,EACrBA,UADqB;UAErBK,cAAc,EAAEyB,qBAFK;UAGrBvB,cAAA,EAAAA;QAHqB,CAAvB,CADK,EAML,IANK,CAAP;MAQD,CAZD,MAYO;QAAA,IAAA6B,mBAAA,EAAAC,cAAA;QACL,OAAO,CACLzC,MAAM,CAAC0C,kBAAP,EAAAF,mBAAA,GACEtD,KADF,aACEA,KADF,wBAAAuD,cAAA,GACEvD,KAAK,CAAES,MADT,cAAA8C,cAAA,uBACEA,cAAA,CAAe7C,KADjB,cAAA4C,mBAAA,cAAAA,mBAAA,GAC2BnB,YAD3B,EAEE;UACEjB,UADF,EACEA,UADF;UAEEK,cAAc,EAAEyB,qBAFlB;UAGEvB,cAAA,EAAAA;QAHF,CAFF,CADK,EASL,KATK,CAAP;MAWD;IAOF,CA1DsD,EA0DpD,CAACU,YAAD,EAAerB,MAAf,EAAuBgB,YAAvB,CA1DoD,CAAvD;IAAA2B,eAAA,GAAAC,cAAA,CAAAb,cAAA;IAAOc,gBAAD,GAAAF,eAAA;IAAmBG,0BAAnB,GAAAH,eAAA;EA4DN,IAAMI,uBAAuB,GAAGnI,KAAK,CAAC6E,MAAN,CAAaa,YAAb,CAAhC;EAEA1F,KAAK,CAACoI,SAAN,CAAgB,YAAM;IACpBD,uBAAuB,CAAC9C,OAAxB,GAAkCK,YAAlC;EACD,CAFD;EAIA,IAAM2C,oBAAoB,GAAGF,uBAAuB,CAAC9C,OAArD;EAEA,IAAIL,KAAK,GAIPsB,kBAAkB,CAACG,YAAD,CAAlB,GACKA,YADL,GAEKwB,gBANP;EAQA,IAAIK,SAAgB,GAAGtD,KAAvB;EAEA,IACE,CAAC7E,YAAY,CAAC6E,KAAK,CAACQ,UAAP,EAAmBA,UAAnB,CAAb,IACA,CAACpF,aAAa,CAACsF,YAAD,EAAe2C,oBAAf,CAFhB,EAGE;IAEAC,SAAS,GAAGlD,MAAM,CAACmD,2BAAP,CAAmCvD,KAAnC,EAA0C;MACpDQ,UADoD,EACpDA,UADoD;MAEpDK,cAFoD,EAEpDA,cAFoD;MAGpDE,cAHoD,EAGpDA,cAHoD;MAIpDyC,eAAe,EAAEC,MAAM,CAACzF,IAAP,CAAY0C,YAAZ,EAA0BgD,MAA1B,CACd,UAAA5F,IAAD;QAAA,OACEuF,oBAAoB,CAACM,cAArB,CAAoC7F,IAApC,KACA4C,YAAY,CAAC5C,IAAD,CAAZ,KAAuBuF,oBAAoB,CAACvF,IAAD,CAH9B;MAAA;IAJmC,CAA1C,CAAZ;EAUD;EAED,IAAM8F,uBAAuB,GAAG5I,KAAK,CAAC6E,MAAN,CAAaP,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAES,MAApB,CAAhC;EAEA/E,KAAK,CAACoI,SAAN,CAAgB,YAAM;IACpBQ,uBAAuB,CAACvD,OAAxB,GAAkCf,KAAlC,aAAkCA,KAAlC,uBAAkCA,KAAK,CAAES,MAAzC;EACD,CAFD,EAEG,CAACT,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAES,MAAR,CAFH;EAIA,IAAIT,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAES,MAAX,EAAmB;IACjB,IAAM8D,cAAc,GAAGD,uBAAuB,CAACvD,OAA/C;IAEA,IAAIyD,MAAJ;IAEA,IACE,OAAOxE,KAAK,CAACS,MAAN,CAAaC,KAApB,KAA8B,QAA9B,IACAV,KAAK,CAACS,MAAN,CAAaC,KAAb,IAAsB,IADtB,IAEAV,KAAK,CAACS,MAAN,KAAiB8D,cAHnB,EAIE;MAEAC,MAAM,GAAG/I,aAAa,CAACgJ,KAAd,CAAoBzE,KAAK,CAACS,MAAN,CAAaC,KAAjC,CAAT;IACD,CAPD,MAOO,IACL,OAAOV,KAAK,CAACS,MAAN,CAAaG,MAApB,KAA+B,QAA/B,KACEZ,KAAK,CAACS,MAAN,CAAaE,OAAb,KAAyB,KAAzB,IAAkCiD,0BAAnC,IACC5D,KAAK,CAACS,MAAN,KAAiB8D,cAFnB,CADK,EAIL;MAEAC,MAAM,GAAG/I,aAAa,CAACiJ,QAAd,CAAuB;QAC9BlG,IAAI,EAAEwB,KAAK,CAACS,MAAN,CAAaG,MADW;QAE9BH,MAAM,EAAET,KAAK,CAACS,MAAN,CAAaA,MAFS;QAG9BkE,IAAI,EAAE3E,KAAK,CAACS,MAAN,CAAakE;MAHW,CAAvB,CAAT;IAKD;IAGD,IAAMC,YAAY,GAAGJ,MAAM,GACvB1D,MAAM,CAAC+D,iBAAP,CAAyBb,SAAzB,EAAoCQ,MAApC,EAA4C;MAC1CtD,UAD0C,EAC1CA,UAD0C;MAE1CK,cAF0C,EAE1CA,cAF0C;MAG1CE,cAAA,EAAAA;IAH0C,CAA5C,CADuB,GAMvB,IANJ;IAQAuC,SAAS,GACPY,YAAY,KAAK,IAAjB,GACI9D,MAAM,CAAC0C,kBAAP,CAA0BoB,YAA1B,EAAwC;MACtC1D,UADsC,EACtCA,UADsC;MAEtCK,cAFsC,EAEtCA,cAFsC;MAGtCE,cAAA,EAAAA;IAHsC,CAAxC,CADJ,GAMIuC,SAPN;EAQD;EAED,IAAMc,YAAY,GAAGpE,KAAK,KAAKsD,SAA/B;EAEA/G,iBAAiB,CAAC,YAAM;IACtB,IAAI6H,YAAJ,EAAkB;MAEhBvC,QAAQ,CAACyB,SAAD,CAAR;IACD;EACF,CALgB,CAAjB;EAUAtD,KAAK,GAAGsD,SAAR;EAEAtI,KAAK,CAACoI,SAAN,CAAgB,YAAM;IACpBtB,MAAM,CAACzC,YAAD,CAAN;IAEA,IAAI,CAAC2C,YAAY,EAAjB,EAAqB;MAInBH,QAAQ,CAACyB,SAAD,CAAR;IACD;IAED,OAAO,YAAM;MAKXe,UAAU,CAAC,YAAM;QACf,IAAI3C,eAAe,OAAOhF,SAAtB,IAAmCqF,MAAM,OAAO1C,YAApD,EAAkE;UAChE6C,YAAY;QACb;MACF,CAJS,EAIP,CAJO,CAAV;IAKD,CAVD;EAYD,CAtBD,EAsBG,EAtBH;EA2BA,IAAMoC,mBAAmB,GAAGtJ,KAAK,CAAC6E,MAAN,EAA5B;EACAyE,mBAAmB,CAACjE,OAApB,GAA8B4C,gBAA9B;EAEA,IAAMtB,QAAQ,GAAG3G,KAAK,CAACqG,WAAN,CAAkB,YAAa;IAC9C,IAAMI,YAAY,GAAGC,eAAe,EAApC;IAEA,OAAOJ,kBAAkB,CAACG,YAAD,CAAlB,GACFA,YADE,GAEF6C,mBAAmB,CAACjE,OAFzB;EAGD,CANgB,EAMd,CAACqB,eAAD,EAAkBJ,kBAAlB,CANc,CAAjB;EAQA,IAAMiD,OAAO,GAAGzI,eAAe,CAAuB,UAAA0I,CAAD,EAAO;IAAA,IAAAC,IAAA;IAC1D,IAAIjE,UAAU,GAAG,EAAjB;IAEA,IAAIlB,KAAJ;IAEA,IAAIkF,CAAC,CAACE,MAAN,EAAc;MAAA,IAAAC,MAAA;MACZrF,KAAK,GAAGU,KAAK,CAAC4E,MAAN,CAAaC,IAAb,CAAmB,UAAAvF,KAAD;QAAA,OAAWA,KAAK,CAAC7C,GAAN,KAAc+H,CAAC,CAACE,MAA7C;MAAA,EAAR;MAEA,KAAAC,MAAA,GAAIrF,KAAJ,cAAAqF,MAAA,eAAIA,MAAA,CAAO7G,IAAX,EAAiB;QACf0C,UAAU,CAACzC,IAAX,CAAgBuB,KAAK,CAACxB,IAAtB;MACD;IACF,CAND,MAMO;MACLwB,KAAK,GAAGU,KAAK,CAAC4E,MAAN,CAAa5E,KAAK,CAAC8E,KAAnB,CAAR;MACAtE,UAAU,CAACzC,IAAX,CAAAI,KAAA,CAAAqC,UAAU,EAAApC,kBAAA,CACLqF,MAAM,CAACzF,IAAP,CAAYuC,OAAZ,EAAqBmD,MAArB,CAA6B,UAAA5F,IAAD;QAAA,IAAAiH,OAAA;QAAA,OAAU,EAAAA,OAAA,GAAAzF,KAAK,UAAL,IAAAyF,OAAA,uBAAAA,OAAA,CAAOjH,IAAP,MAAgBA,IAA1B;MAAA,CAA5B,CADL;IAGD;IAED,IAAIwB,KAAK,IAAI,IAAb,EAAmB;MACjB;IACD;IAED,IAAM0F,UAAU,GAAGC,WAAW,CAAC3F,KAAK,CAAC7C,GAAP,CAAX,CAAuBuI,UAA1C;IAEA,IAAME,SAAS,GAAI,CAAAT,IAAA,KAAD,EACfpG,MADe,CAAAF,KAAA,CAAAsG,IAAA,EAAArG,kBAAA,CAGX,CACDoB,eADC,EAAAnB,MAAA,CAAAD,kBAAA,CAEEoC,UAAU,CAACC,GAAX,CAAgB,UAAA3C,IAAD,EAAU;MAC1B,IAAQoH,SAAA,GAAc3E,OAAO,CAACzC,IAAD,CAAP,CAAcL,KAApC,CAAQyH,SAAA;MACR,OAAOA,SAAP;IACD,CAHE,CAFF,GAMDzE,GANC,CAMI,UAAAyE,SAAD,EAAe;MACnB,IAAMzE,GAAG,GACP,OAAOyE,SAAP,KAAqB,UAArB,GACIA,SAAS,CAAC;QAAE5F,KAAK,EAAEA,KAAT;QAAuB0F,UAAA,EAAAA;MAAvB,CAAD,CADb,GAEIE,SAHN;MAKA,OAAOzE,GAAG,GACNgD,MAAM,CAACzF,IAAP,CAAYyC,GAAZ,EACGiD,MADH,CACW,UAAAlG,IAAD;QAAA,OAAUA,IAAI,KAAKgH,CAAC,CAAChH,IAD/B;MAAA,GAEGiD,GAFH,CAEQ,UAAAjD,IAAD;QAAA,OAAUiD,GAAV,aAAUA,GAAV,uBAAUA,GAAG,CAAGjD,IAAH,CAFpB;MAAA,EADM,GAINd,SAJJ;IAKD,CAjBE,CAHW,GAwBfgH,MAxBe,CAwBR,UAACyB,EAAD,EAAKC,CAAL,EAAQC,IAAR;MAAA,OAAiBF,EAAE,IAAIE,IAAI,CAACC,WAAL,CAAiBH,EAAjB,MAAyBC,CAxBxC;IAAA,EAAlB;IA0BAF,SAAS,CAACvG,OAAV,CAAmB,UAAA4G,QAAD;MAAA,OAAcA,QAAd,aAAcA,QAAd,uBAAcA,QAAQ,CAAGf,CAAH,CAAxC;IAAA;EACD,CAnD8B,CAA/B;EAqDAxI,cAAc,CAAC;IAAEgE,KAAF,EAAEA,KAAF;IAASuE,OAAA,EAAAA;EAAT,CAAD,CAAd;EAEAvJ,KAAK,CAACoI,SAAN,CAAgB,YAAM;IACpBmB,OAAO,CAACiB,IAAR,CAAa;MAAEhI,IAAI,EAAE,OAAR;MAAiBiI,IAAI,EAAE;QAAEzF,KAAA,EAAAA;MAAF;IAAvB,CAAb;EACD,CAFD,EAEG,CAACuE,OAAD,EAAUvE,KAAV,CAFH;EAIA,IAAA0F,kBAAA,GAAmDhK,iBAAiB,EAApE;IAAmBiK,cAAb,GAAAD,kBAAA,CAAER,SAAS;IAAkBU,WAAA,GAAAF,kBAAA,CAAAE,WAAA;EAEnC,IAAAC,qBAAA,GAA6C5J,sBAAsB,EAAnE;IAAQ6J,cAAF,GAAAD,qBAAA,CAAEC,cAAF;IAAkBC,gBAAA,GAAAF,qBAAA,CAAAE,gBAAA;EAExB,IAAMC,QAAQ,GAAG7J,WAAW,CAAC;IAC3BiE,MAD2B,EAC3BA,MAD2B;IAE3BuB,QAF2B,EAE3BA,QAF2B;IAG3BE,QAH2B,EAG3BA,QAH2B;IAI3BpF,GAAG,EAAE6C,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE7C,GAJe;IAK3BwJ,eAAe,EAAEN,cAAc,CAAC7B,MALL;IAM3BoC,qBAAqB,EAAEJ,cAAc,CAACK,YANX;IAO3BC,mBAAmB,EAAE;MACnB5F,UADmB,EACnBA,UADmB;MAEnBK,cAFmB,EAEnBA,cAFmB;MAGnBE,cAAA,EAAAA;IAHmB,CAPM;IAY3BwD,OAAA,EAAAA;EAZ2B,CAAD,CAA5B;EAeA,IAAM8B,YAAY,GAAGhK,eAAe,CAAC;IACnC+D,MADmC,EACnCA,MADmC;IAEnC3D,GAAG,EAAE6C,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE7C,GAFuB;IAGnCkF,QAHmC,EAGnCA,QAHmC;IAInCE,QAAA,EAAAA;EAJmC,CAAD,CAApC;EAOA,IAAMmD,UAAU,GAAG9I,oBAAoB,CAKrC;IACAoK,EAAE,EAAErI,OAAO,CAACqI,EADZ;IAEAN,QAFA,EAEAA,QAFA;IAGArE,QAHA,EAGAA,QAHA;IAIA4C,OAJA,EAIAA,OAJA;IAKAnE,MAAA,EAAAA;EALA,CALqC,CAAvC;EAaArE,kCAAkC,CAAC;IACjCiJ,UADiC,EACjCA,UADiC;IAEjCuB,gBAAgB,EAAEZ,cAAc,CAACa;EAFA,CAAD,CAAlC;EAKApK,aAAa,CAAC;IACZuF,QADY,EACZA,QADY;IAEZ8E,iBAAiB,EAAEX,cAAc,CAACnE;EAFtB,CAAD,CAAb;EAKA,IAAMsD,WAAW,GAAGpJ,cAAc,CAKhC;IACAmE,KADA,EACAA,KADA;IAEAO,OAFA,EAEAA,OAFA;IAGAyE,UAHA,EAGAA,UAHA;IAIA1G,aAAa,EAAEL,OAAO,CAACK,aAJvB;IAKAoI,oBAAoB,EAAEzI,OAAO,CAACyI,oBAL9B;IAMAV,QANA,EAMAA,QANA;IAOArE,QAPA,EAOAA,QAPA;IAQAE,QARA,EAQAA,QARA;IASAwE,YATA,EASAA,YATA;IAUAT,WAVA,EAUAA,WAVA;IAWAG,gBAXA,EAWAA,gBAXA;IAYA3F,MAZA,EAYAA,MAZA;IAcAmE,OAAA,EAAAA;EAdA,CALgC,CAAlC;EAsBA3I,gBAAgB,CAAC;IACfoE,KADe,EACfA,KADe;IAEfgF,UAFe,EAEfA,UAFe;IAGfC,WAAA,EAAAA;EAHe,CAAD,CAAhB;EAMA,IAAM0B,iBAAiB,GAAGhL,YAAY,CAACN,wBAAwB,CAACuL,QAA1B,EAAoC;IACxEC,KAAK,EAAE7B;EADiE,CAApC,CAAtC;EAIA,OAAO;IACLhF,KADK,EACLA,KADK;IAELgF,UAFK,EAELA,UAFK;IAGLC,WAHK,EAGLA,WAHK;IAIL0B,iBAAA,EAAAA;EAJK,CAAP;AAMD"},"metadata":{},"sourceType":"module","externalDependencies":[]}