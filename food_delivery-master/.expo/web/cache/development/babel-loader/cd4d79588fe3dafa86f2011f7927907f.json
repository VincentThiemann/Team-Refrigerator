{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isKeyboardShown = _React$useState2[0],\n    setIsKeyboardShown = _React$useState2[1];\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n    var subscriptions;\n    if (Platform.OS === 'ios') {\n      subscriptions = [Keyboard.addListener('keyboardWillShow', handleKeyboardShow), Keyboard.addListener('keyboardWillHide', handleKeyboardHide)];\n    } else {\n      subscriptions = [Keyboard.addListener('keyboardDidShow', handleKeyboardShow), Keyboard.addListener('keyboardDidHide', handleKeyboardHide)];\n    }\n    return function () {\n      subscriptions.forEach(function (s) {\n        return s.remove();\n      });\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["React","useIsKeyboardShown","isKeyboardShown","setIsKeyboardShown","useState","useEffect","handleKeyboardShow","handleKeyboardHide","subscriptions","Platform","OS","Keyboard","addListener","forEach","s","remove"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAA,QAAA;AAAA,OAAA,QAAA;AAGA,eAAe,SAASC,kBAAT,CAAA,EAA8B;EAC3C,IAAA,eAAA,GAA8CD,KAAK,CAACI,QAANJ,CAAe,KAAfA,CAA9C;IAAA,gBAAA,GAAA,cAAA,CAAA,eAAA;IAAOE,eAAD,GAAA,gBAAA;IAAkBC,kBAAlB,GAAA,gBAAA;EAENH,KAAK,CAACK,SAANL,CAAgB,YAAM;IACpB,IAAMM,kBAAkB,GAAG,SAArBA,kBAAkB,CAAA;MAAA,OAASH,kBAAkB,CAAC,IAAD,CAAnD;IAAA;IACA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAkB,CAAA;MAAA,OAASJ,kBAAkB,CAAC,KAAD,CAAnD;IAAA;IAEA,IAAIK,aAAJ;IAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzBD,aAAa,GAAG,CACdG,QAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCL,kBAAzCK,CADc,EAEdA,QAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCJ,kBAAzCI,CAFc,CAAhBH;IAID,CALD,MAKO;MACLA,aAAa,GAAG,CACdG,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCL,kBAAxCK,CADc,EAEdA,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCJ,kBAAxCI,CAFc,CAAhBH;IAID;IAED,OAAO,YAAM;MACXA,aAAa,CAACK,OAAdL,CAAuBM,UAAAA,CAAD;QAAA,OAAOA,CAAC,CAACC,MAAFD,EAA7BN;MAAAA,EAAAA;IACD,CAFD;EAGD,CArBDR,EAqBG,EArBHA,CAAAA;EAuBA,OAAOE,eAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { EmitterSubscription, Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    let subscriptions: EmitterSubscription[];\n\n    if (Platform.OS === 'ios') {\n      subscriptions = [\n        Keyboard.addListener('keyboardWillShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardWillHide', handleKeyboardHide),\n      ];\n    } else {\n      subscriptions = [\n        Keyboard.addListener('keyboardDidShow', handleKeyboardShow),\n        Keyboard.addListener('keyboardDidHide', handleKeyboardHide),\n      ];\n    }\n\n    return () => {\n      subscriptions.forEach((s) => s.remove());\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"]},"metadata":{},"sourceType":"module"}