{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref4.presentation,\n    _ref4$gestureDirectio = _ref4.gestureDirection,\n    gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref) {\n      var route = _ref.route,\n        height = _ref.height;\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n            return scene.descriptor.options.cardStyleInterpolator;\n          }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref5.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","Animated","Platform","StyleSheet","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","_curr$descriptor$opti","_curr$descriptor$opti2","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","_ref4","presentation","_ref4$gestureDirectio","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_inherits","_super","_createSuper","_props","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","e","_e$nativeEvent$layout","nativeEvent","setState","state","props","headerHeights","_ref","_ref2","previousHeight","_objectSpread","_defineProperty2","routes","_ref3","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","initialMetrics","frame","descriptors","_createClass","value","render","_this2","_this$props","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","OS","_this$state","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","_scene$descriptor$opt","headerMode","headerTransparent","_options$headerShown","headerShown","activeScreensLimit","length","_options$detachPrevio","detachPreviousScreen","map","lastIndexOf","floatingHeader","createElement","Fragment","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","enabled","container","onLayout","handleLayout","self","_scenes","_scenes2","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","_scene$descriptor$opt2","_scene$descriptor$opt3","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","getDerivedStateFromProps","_ref5","animationEnabled","Value","openingRouteKeys","_descriptor$options$h","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","_optionsForTransition","_optionsForTransition2","gestureEnabled","_optionsForTransition3","_optionsForTransition4","transitionSpec","_optionsForTransition5","_optionsForTransition6","headerStyleInterpolator","_optionsForTransition7","cardOverlayEnabled","header","next","__memo","every","it","Component","default","create","flex","position","zIndex"],"sources":["D:\\Projects\\food_dev\\food_delivery-master\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else {\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n                if (\n                  flattenedHeaderStyle &&\n                  'backgroundColor' in flattenedHeaderStyle &&\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\n                ) {\n                  headerDarkContent = !Color(\n                    flattenedHeaderStyle.backgroundColor\n                  ).isDark();\n                }\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}