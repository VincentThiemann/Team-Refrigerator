{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return \"- \" + key;\n  }).join('\\n');\n};\nexport default function validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n  if (invalidKeys.length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\" + formatToList(invalidKeys) + \"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\" + formatToList(validKeys) + \"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        _ = _ref2[0],\n        value = _ref2[1];\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"names":["formatToList","items","map","key","join","validatePathConfig","config","root","arguments","length","undefined","validKeys","push","invalidKeys","Object","keys","filter","includes","Error","screens","entries","forEach","_ref","_ref2","_slicedToArray","_","value"],"sources":["D:\\Projects\\food_dev\\food_delivery-master\\node_modules\\@react-navigation\\core\\lib\\module\\validatePathConfig.tsx"],"sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"],"mappings":";AAAA,IAAMA,YAAY,GAAI,SAAhBA,YAAYA,CAAIC,KAAD;EAAA,OACnBA,KAAK,CAACC,GAAN,CAAW,UAAAC,GAAD;IAAA,cAAcA,GAAI;EAAA,CAA5B,EAA+BC,IAA/B,CAAoC,IAApC,CADF;AAAA;AAGA,eAAe,SAASC,kBAATA,CAA4BC,MAA5B,EAAsD;EAAA,IAAbC,IAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAN,IAAM;EACnE,IAAMG,SAAS,GAAG,CAAC,kBAAD,EAAqB,SAArB,CAAlB;EAEA,IAAI,CAACJ,IAAL,EAAW;IACTI,SAAS,CAACC,IAAV,CAAe,MAAf,EAAuB,OAAvB,EAAgC,WAAhC,EAA6C,OAA7C;EACD;EAED,IAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,MAApB,CACjB,UAAAb,GAAD;IAAA,OAAS,CAACQ,SAAS,CAACM,QAAV,CAAmBd,GAAnB,CADQ;EAAA,EAApB;EAIA,IAAIU,WAAW,CAACJ,MAAhB,EAAwB;IACtB,MAAM,IAAIS,KAAJ,sDAC+ClB,YAAY,CAC7Da,WAD6D,CAE7D,0HAAoHb,YAAY,CAChIW,SADgI,CAEhI,4HALJ;EAOD;EAED,IAAIL,MAAM,CAACa,OAAX,EAAoB;IAClBL,MAAM,CAACM,OAAP,CAAed,MAAM,CAACa,OAAtB,EAA+BE,OAA/B,CAAuC,UAAAC,IAAA,EAAgB;MAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;QAAdG,CAAD,GAAAF,KAAA;QAAIG,KAAJ,GAAAH,KAAA;MACtC,IAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;QAC7BrB,kBAAkB,CAACqB,KAAD,EAAQ,KAAR,CAAlB;MACD;IACF,CAJD;EAKD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}