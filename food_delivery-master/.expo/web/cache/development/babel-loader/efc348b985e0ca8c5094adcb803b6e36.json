{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from \"./ProviderConstants\";\nexport var SUPPORTED = 'SUPPORTED';\nexport var USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport var NOT_SUPPORTED = 'NOT_SUPPORTED';\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\nfunction getAirComponentName(provider, component) {\n  return \"\" + getAirMapName(provider) + component;\n}\nexport var contextTypes = {\n  provider: PropTypes.string\n};\nexport var createNotSupportedComponent = function createNotSupportedComponent(message) {\n  return function () {\n    console.error(message);\n    return null;\n  };\n};\nfunction getViewManagerConfig(viewManagerName) {\n  var UIManager = NativeModules.UIManager;\n  if (!UIManager.getViewManagerConfig) {\n    return UIManager[viewManagerName];\n  }\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\nexport var googleMapIsInstalled = !!getViewManagerConfig(getAirMapName(PROVIDER_GOOGLE));\nexport default function decorateMapComponent(Component, _ref) {\n  var componentType = _ref.componentType,\n    providers = _ref.providers;\n  var components = {};\n  var getDefaultComponent = function getDefaultComponent() {\n    return requireNativeComponent(getAirComponentName(null, componentType), Component);\n  };\n  Component.contextTypes = contextTypes;\n  Component.prototype.getAirComponent = function getAirComponent() {\n    var provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) {\n      return components[provider];\n    }\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n    var providerInfo = providers[provider];\n    var platformSupport = providerInfo[Platform.OS];\n    var componentName = getAirComponentName(provider, componentType);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\"react-native-maps: \" + componentName + \" is not supported on \" + Platform.OS);\n    } else if (platformSupport === SUPPORTED) {\n      if (provider !== PROVIDER_GOOGLE || Platform.OS === 'ios' && googleMapIsInstalled) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      if (!components[PROVIDER_DEFAULT]) {\n        components[PROVIDER_DEFAULT] = getDefaultComponent();\n      }\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n    return components[provider];\n  };\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    var componentName = getAirComponentName(this.context.provider, componentType);\n    return getViewManagerConfig(componentName).Commands[name];\n  };\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {\n    var airComponentName = getAirComponentName(this.context.provider, componentType) + \"Manager\";\n    return NativeModules[airComponentName][name];\n  };\n  return Component;\n}","map":{"version":3,"names":["PropTypes","requireNativeComponent","NativeModules","Platform","PROVIDER_DEFAULT","PROVIDER_GOOGLE","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","getAirMapName","provider","OS","getAirComponentName","component","contextTypes","string","createNotSupportedComponent","message","console","error","getViewManagerConfig","viewManagerName","UIManager","googleMapIsInstalled","decorateMapComponent","Component","_ref","componentType","providers","components","getDefaultComponent","prototype","getAirComponent","context","providerInfo","platformSupport","componentName","getUIManagerCommand","name","Commands","getMapManagerCommand","airComponentName"],"sources":["D:/Projects/food_dev/food_delivery-master/node_modules/react-native-maps/src/decorateMapComponent.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { requireNativeComponent, NativeModules, Platform } from 'react-native';\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from './ProviderConstants';\n\nexport const SUPPORTED = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\n\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return `${getAirMapName(provider)}${component}`;\n}\n\nexport const contextTypes = {\n  provider: PropTypes.string,\n};\n\nexport const createNotSupportedComponent = (message) => () => {\n  console.error(message);\n  return null;\n};\n\nfunction getViewManagerConfig(viewManagerName) {\n  const UIManager = NativeModules.UIManager;\n  if (!UIManager.getViewManagerConfig) {\n    // RN < 0.58\n    return UIManager[viewManagerName];\n  }\n  // RN >= 0.58\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\nexport const googleMapIsInstalled = !!getViewManagerConfig(\n  getAirMapName(PROVIDER_GOOGLE)\n);\n\nexport default function decorateMapComponent(\n  Component,\n  { componentType, providers }\n) {\n  const components = {};\n\n  const getDefaultComponent = () =>\n    requireNativeComponent(getAirComponentName(null, componentType), Component);\n\n  Component.contextTypes = contextTypes;\n\n  Component.prototype.getAirComponent = function getAirComponent() {\n    const provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) {\n      return components[provider];\n    }\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    const providerInfo = providers[provider];\n    const platformSupport = providerInfo[Platform.OS];\n    const componentName = getAirComponentName(provider, componentType);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\n        `react-native-maps: ${componentName} is not supported on ${Platform.OS}`\n      );\n    } else if (platformSupport === SUPPORTED) {\n      if (\n        provider !== PROVIDER_GOOGLE ||\n        (Platform.OS === 'ios' && googleMapIsInstalled)\n      ) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n      if (!components[PROVIDER_DEFAULT]) {\n        components[PROVIDER_DEFAULT] = getDefaultComponent();\n      }\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    const componentName = getAirComponentName(\n      this.context.provider,\n      componentType\n    );\n    return getViewManagerConfig(componentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(\n    name\n  ) {\n    const airComponentName = `${getAirComponentName(\n      this.context.provider,\n      componentType\n    )}Manager`;\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}